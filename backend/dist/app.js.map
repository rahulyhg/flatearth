{"version":3,"sources":["../src/app.js"],"names":["app","middlewares","readdirSync","__dirname","sort","forEach","middleware","use","require","default","server","createServer","callback","wss","Server","on","ws","ctx","location","parse","req","url","console","log","message","send","listen","err","Error"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA,MAAMA,MAAM,mBAAZ;AACA,MAAMC,cAAc,aACjBC,WADiB,CACL,gBAAKC,SAAL,EAAgB,eAAhB,CADK,EAEjBC,IAFiB,EAApB;;AAIAH,YAAYI,OAAZ,CAAoBC,cAAc;AAChC;AACAN,MAAIO,GAAJ,CAAQC,QAAS,iBAAgBF,UAAW,EAApC,EAAuCG,OAA/C;AACD,CAHD;;AAKAT,IAAIO,GAAJ,CAAQ,wBAAM,SAAN,uBAAR;;AAEA,MAAMG,SAAS,eAAKC,YAAL,CAAkBX,IAAIY,QAAJ,EAAlB,CAAf;AACA,MAAMC,MAAM,IAAI,aAAUC,MAAd,CAAqB,EAAEJ,MAAF,EAArB,CAAZ;AACAG,IAAIE,EAAJ,CAAO,YAAP,EAAqB,CAACC,EAAD,EAAKC,GAAL,KAAa;AAChC,QAAMC,WAAW,cAAIC,KAAJ,CAAUF,IAAIG,GAAJ,CAAQC,GAAlB,EAAuB,IAAvB,CAAjB;AACAC,UAAQC,GAAR,CAAYL,QAAZ;AACA;AACA;;AAEAF,KAAGD,EAAH,CAAM,SAAN,EAAiBS,WAAW;AAC1BF,YAAQC,GAAR,CAAY,cAAZ,EAA4BC,OAA5B;AACD,GAFD;;AAIAR,KAAGS,IAAH,CAAQ,WAAR;AACD,CAXD;AAYAzB,IAAI0B,MAAJ,eAAiBC,OAAO;AACtB,MAAIA,GAAJ,EAAS,MAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACTL,UAAQC,GAAR,CAAY,yBAAZ;AACD,CAHD","file":"app.js","sourcesContent":["// @flow\nimport Koa from 'koa';\nimport fs from 'fs';\nimport WebSocket from 'ws';\nimport http from 'http';\nimport url from 'url';\nimport { join } from 'path';\nimport { HOST, PORT } from 'config';\nimport mount from 'koa-mount';\nimport database from './libs/mongoose';\nimport APIModules from './modules/API-modules';\n\ndatabase();\n\nconst app = new Koa();\nconst middlewares = fs\n  .readdirSync(join(__dirname, './middlewares'))\n  .sort();\n\nmiddlewares.forEach(middleware => {\n  // eslint-disable-next-line\n  app.use(require(`./middlewares/${middleware}`).default);\n});\n\napp.use(mount('/api/v1', APIModules));\n\nconst server = http.createServer(app.callback());\nconst wss = new WebSocket.Server({ server });\nwss.on('connection', (ws, ctx) => {\n  const location = url.parse(ctx.req.url, true);\n  console.log(location);\n  // You might use location.query.access_token to authenticate or share sessions\n  // or req.headers.cookie (see http://stackoverflow.com/a/16395220/151312)\n\n  ws.on('message', message => {\n    console.log('received: %s', message);\n  });\n\n  ws.send('something');\n});\napp.listen(PORT, err => {\n  if (err) throw new Error(err);\n  console.log('server running at %s:%s', HOST, PORT);\n});\n"]}