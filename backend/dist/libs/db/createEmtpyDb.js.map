{"version":3,"sources":["../../../src/libs/db/createEmtpyDb.js"],"names":["db","connection","readyState","on","clearDatabase","ensureIndexes","ensureCapped","collections","listCollections","toArray","collectionNames","map","collection","name","indexOf","filter","Boolean","dropCollection","modelNames","modelName","model","models","bind","schema","options","capped","command","convertToCapped","size"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;kBAEe,YAAY;AACzB,MAAIA,EAAJ;;AAEA,MAAI,mBAASC,UAAT,CAAoBC,UAApB,KAAmC,CAAvC,EAA0C;AACxC;AACAF,SAAK,mBAASC,UAAT,CAAoBD,EAAzB;AACD,GAHD,MAGO;AACLA,SAAK,MAAM,wBAAS,mBAASC,UAAT,CAAoBE,EAA7B,EAAiC,MAAjC,CAAX;AACD;;AAED,QAAMC,cAAcJ,EAAd,CAAN;AACA,QAAMK,eAAN;AACA,QAAMC,cAAN;AACD,C;;AAED,eAAeF,aAAf,CAA6BJ,EAA7B,EAAiC;AAC/B,QAAMO,cAAc,MAAMP,GAAGQ,eAAH,GAAqBC,OAArB,EAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,kBAAkBH,YACrBI,GADqB,CACjBC,cAAc;AACjB,QAAIA,WAAWC,IAAX,CAAgBC,OAAhB,CAAwB,SAAxB,MAAuC,CAA3C,EAA8C;AAC5C,aAAO,IAAP;AACD;AACD,WAAOF,WAAWC,IAAlB;AACD,GANqB,EAOrBE,MAPqB,CAOdC,OAPc,CAAxB;;AASAN,kBAAgBC,GAAhB,CAAoBE,QAAQ,wBAASb,GAAGiB,cAAZ,EAA4BJ,IAA5B,CAA5B;AACD;;AAED;AACA;AACA,eAAeR,aAAf,CAA6BL,EAA7B,EAAiC;AAC/B,QAAM,mBAASkB,UAAT,GAAsBP,GAAtB,CAA0BQ,aAAa;AAC3C,UAAMC,QAAQ,mBAASC,MAAT,CAAgBF,SAAhB,CAAd;AACA,WAAO,wBAASC,MAAMf,aAAN,CAAoBiB,IAApB,CAAyBF,KAAzB,CAAT,GAAP;AACD,GAHK,CAAN;AAID;;AAED;AACA,eAAed,YAAf,CAA4BN,EAA5B,EAAgC;AAC9B,QAAM,mBAASkB,UAAT,GAAsBP,GAAtB,CAA0BQ,aAAa;AAC3C,UAAMC,QAAQ,mBAASC,MAAT,CAAgBF,SAAhB,CAAd;;AAEA,UAAMI,SAASH,MAAMG,MAArB;AACA,QAAI,CAACA,OAAOC,OAAP,CAAeC,MAApB,EAA4B;AAC5B,WAAO,wBAASzB,GAAG0B,OAAZ,EAAqB;AAC1BC,uBAAiBP,MAAMR,UAAN,CAAiBC,IADR;AAE1Be,YAAML,OAAOC,OAAP,CAAeC;AAFK,KAArB,CAAP;AAID,GATK,CAAN;AAUD","file":"createEmtpyDb.js","sourcesContent":["import mongoose from 'mongoose';\nimport log from 'log';\nimport thunkify from 'thunkify';\n\nlog();\n\nexport default async () => {\n  let db;\n\n  if (mongoose.connection.readyState === 1) {\n    // connected\n    db = mongoose.connection.db;\n  } else {\n    db = await thunkify(mongoose.connection.on)('open');\n  }\n\n  await clearDatabase(db);\n  await ensureIndexes();\n  await ensureCapped();\n};\n\nasync function clearDatabase(db) {\n  const collections = await db.listCollections().toArray();\n  // var collections = yield new Promise(function(resolve, reject) {\n  //   db.listCollections().toArray(function(err, items) {\n  //     if (err) return reject(err);\n  //     resolve(items);\n  //   });\n  // });\n\n  const collectionNames = collections\n    .map(collection => {\n      if (collection.name.indexOf('system.') === 0) {\n        return null;\n      }\n      return collection.name;\n    })\n    .filter(Boolean);\n\n  collectionNames.map(name => thunkify(db.dropCollection)(name));\n}\n\n// wait till indexes are complete, especially unique\n// required to throw errors\nasync function ensureIndexes(db) {\n  await mongoose.modelNames().map(modelName => {\n    const model = mongoose.models[modelName];\n    return thunkify(model.ensureIndexes.bind(model))();\n  });\n}\n\n// ensure that capped collections are actually capped\nasync function ensureCapped(db) {\n  await mongoose.modelNames().map(modelName => {\n    const model = mongoose.models[modelName];\n\n    const schema = model.schema;\n    if (!schema.options.capped) return;\n    return thunkify(db.command)({\n      convertToCapped: model.collection.name,\n      size: schema.options.capped\n    });\n  });\n}\n"]}