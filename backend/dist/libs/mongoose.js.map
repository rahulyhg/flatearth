{"version":3,"sources":["../../src/libs/mongoose.js"],"names":["users","roles","createFixtures","Model","fixture","remove","data","create","e","Error","Promise","resolve","reject","process","env","MOONGOSE_DEBUG","set","connection","on","error","console","log","once","db","mongoose","uri","includes","connect","options","err"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAM,EAAEA,KAAF,EAASC,KAAT,uBAAN;;AAEA,eAAeC,cAAf,CAA8BC,KAA9B,EAAqCC,OAArC,EAA8C;AAC5C,QAAMD,MAAME,MAAN,CAAa,EAAb,CAAN;AACA,OAAK,IAAIC,IAAT,IAAiBF,OAAjB,EAA0B;AACxB,QAAI;AACF,YAAMD,MAAMI,MAAN,CAAaD,IAAb,CAAN;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU;AACV,YAAM,IAAIC,KAAJ,CAAUD,CAAV,CAAN;AACD;AACF;AACF;;kBAEc,MACb,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAIC,QAAQC,GAAR,CAAYC,cAAhB,EAAgC;AAC9B,uBAASC,GAAT,CAAa,OAAb,EAAsB,IAAtB;AACD;;AAED,qBAASC,UAAT,CACGC,EADH,CACM,OADN,EACeC,SAASP,OAAOO,KAAP,CADxB,EAEGD,EAFH,CAEM,OAFN,EAEe,MAAME,QAAQC,GAAR,CAAY,6BAAZ,CAFrB,EAGGC,IAHH,CAGQ,MAHR,EAGgB,YAAY;AACxB;AACA;AACA;AACAX,YAAQ,mBAASM,UAAT,CAAoBM,EAA5B;AACA,QAAI,iBAAOC,QAAP,CAAgBC,GAAhB,CAAoBC,QAApB,CAA6B,MAA7B,CAAJ,EAA0C;AACxCN,cAAQC,GAAR,CAAY,mBAAZ,EAAiC,uBAAjC;AACD,KAFD,MAEO;AACLD,cAAQC,GAAR,CAAY,4BAAZ;AACD;AACF,GAbH;AAcAD,UAAQC,GAAR,CAAY,4BAAZ;;AAEA,qBAASX,OAAT,GAAmBA,OAAnB;;AAEA,qBAASiB,OAAT,CAAiB,iBAAOH,QAAP,CAAgBC,GAAjC,EAAsC,iBAAOD,QAAP,CAAgBI,OAAtD,EAA+DC,OAAO;AACpE,QAAIA,GAAJ,EAAS;AACPT,cAAQC,GAAR,CAAYQ,GAAZ;AACD;AACF,GAJD;AAKD,CA5BD,C","file":"mongoose.js","sourcesContent":["// @flow\nimport mongoose from 'mongoose';\nimport config from 'config';\nimport createEmptyDb from './db/createEmtpyDb';\nimport fixtures from '../fixtures';\n\nconst { users, roles } = fixtures;\n\nasync function createFixtures(Model, fixture) {\n  await Model.remove({});\n  for (let data of fixture) {\n    try {\n      await Model.create(data);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n}\n\nexport default () =>\n  new Promise((resolve, reject) => {\n    if (process.env.MOONGOSE_DEBUG) {\n      mongoose.set('debug', true);\n    }\n\n    mongoose.connection\n      .on('error', error => reject(error))\n      .on('close', () => console.log('Database connection closed.'))\n      .once('open', async () => {\n        // await Promise.all[\n        //   (createEmptyDb(), createFixtures(Roles, roles), createFixtures(User, users))\n        // ];\n        resolve(mongoose.connection.db);\n        if (config.mongoose.uri.includes('mlab')) {\n          console.log('\\x1b[36m%s\\x1b[0m', 'Connected to MongoLab');\n        } else {\n          console.log('Server uses local-Database');\n        }\n      });\n    console.log('Database initialization...');\n\n    mongoose.Promise = Promise;\n\n    mongoose.connect(config.mongoose.uri, config.mongoose.options, err => {\n      if (err) {\n        console.log(err);\n      }\n    });\n  });\n"]}