{"version":3,"sources":["../../src/models/User.js"],"names":["ObjectId","Schema","Types","UserSchema","name","type","String","required","unique","passwordHash","email","validate","validator","checkEmail","value","test","msg","salt","role","ref","default","lastVisited","Number","Date","now","isActivated","Boolean","virtual","set","password","undefined","length","invalidate","_plainPassword","genSaltSync","hashSync","get","methods","validPassword","compareSync","transform","doc","_id","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,WAAW,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBF,QAAvC;;AAEA,MAAMG,aAAa,IAAI,mBAASF,MAAb,CAAoB;AACrCG,QAAM,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,oBAA1B,EAAgDC,QAAQ,IAAxD,EAD+B;AAErCC,gBAAc,EAAEJ,MAAMC,MAAR,EAFuB;AAGrCI,SAAO;AACLL,UAAMC,MADD;AAELE,YAAQ,IAFH;AAGLD,cAAU,0CAHL;AAILI,cAAU,CACR;AACEC,iBAAW,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACpC,eAAO,oCAAmCC,IAAnC,CAAwCD,KAAxC;AAAP;AACD,OAHH;AAIEE,WAAK;AAJP,KADQ;AAJL,GAH8B;AAgBrCC,QAAM;AACJV,cAAU,IADN;AAEJF,UAAMC;AAFF,GAhB+B;AAoBrCY,QAAM;AACJb,UAAML,QADF;AAEJO,cAAU,IAFN;AAGJY,SAAK,OAHD;AAIJC,aAAS,mBAAI,YAAJ;AAJL,GApB+B;AA0BrCC,eAAa,EAAEhB,MAAMiB,MAAR,EAAgBF,SAASG,KAAKC,GAAL,EAAzB,EA1BwB;AA2BrCC,eAAa,EAAEpB,MAAMqB,OAAR,EAAiBN,SAAS,KAA1B;AA3BwB,CAApB,CAAnB;;AA8BAjB,WAAWwB,OAAX,CAAmB,UAAnB,EACGC,GADH,CACO,UAASC,QAAT,EAAmB;AACtB,MAAIA,aAAaC,SAAjB,EAA4B;AAC1B,QAAID,SAASE,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAKC,UAAL,CAAgB,UAAhB,EAA4B,uCAA5B;AACD;AACF;AACD,OAAKC,cAAL,GAAsBJ,QAAtB;;AAEA,OAAKZ,IAAL,GAAY,uBAAOiB,WAAP,CAAmB,CAAnB,CAAZ;AACA,OAAKzB,YAAL,GAAoB,uBAAO0B,QAAP,CAAgBN,QAAhB,EAA0B,KAAKZ,IAA/B,CAApB;AACD,CAXH,EAYGmB,GAZH,CAYO,YAAW;AACd,SAAO,KAAKH,cAAZ;AACD,CAdH;;AAgBA9B,WAAWkC,OAAX,CAAmBC,aAAnB,GAAmC,UAAST,QAAT,EAAmB;AACpD;AACA,MAAI,CAACA,QAAL,EAAe,OAAO,KAAP;AACf;AACA,MAAI,CAAC,KAAKpB,YAAV,EAAwB,OAAO,KAAP;;AAExB,SAAO,uBAAO8B,WAAP,CAAmBV,QAAnB,EAA6B,KAAKpB,YAAlC,CAAP;AACD,CAPD;;AASAN,WAAWyB,GAAX,CAAe,QAAf,EAAyB;AACvBY,YAAUC,GAAV,EAAe,EAAE/B,KAAF,EAASN,IAAT,EAAec,IAAf,EAAqBwB,GAArB,EAAf,EAA2C;AACzC,WAAO,EAAEA,GAAF,EAAOhC,KAAP,EAAcN,IAAd,EAAoBc,IAApB,EAAP;AACD;AAHsB,CAAzB;;kBAMe,mBAASyB,KAAT,CAAe,MAAf,EAAuBxC,UAAvB,C","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt-nodejs';\nimport oid from '../libs/db/oid';\n\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst UserSchema = new mongoose.Schema({\n  name: { type: String, required: 'User name required', unique: true },\n  passwordHash: { type: String },\n  email: {\n    type: String,\n    unique: true,\n    required: 'Email пользователя не должен быть пустым',\n    validate: [\n      {\n        validator: function checkEmail(value) {\n          return /^[-.\\w]+@([\\w-]+\\.)+[\\w-]{2,12}$/.test(value);\n        },\n        msg: 'Укажите, пожалуйста, корректный email.'\n      }\n    ]\n  },\n  salt: {\n    required: true,\n    type: String\n  },\n  role: {\n    type: ObjectId,\n    required: true,\n    ref: 'Roles',\n    default: oid('admin-role')\n  },\n  lastVisited: { type: Number, default: Date.now() },\n  isActivated: { type: Boolean, default: false }\n});\n\nUserSchema.virtual('password')\n  .set(function(password) {\n    if (password !== undefined) {\n      if (password.length < 4) {\n        this.invalidate('password', 'Пароль должен быть минимум 4 символа.');\n      }\n    }\n    this._plainPassword = password;\n\n    this.salt = bcrypt.genSaltSync(8);\n    this.passwordHash = bcrypt.hashSync(password, this.salt);\n  })\n  .get(function() {\n    return this._plainPassword;\n  });\n\nUserSchema.methods.validPassword = function(password) {\n  // empty password means no login by password\n  if (!password) return false;\n  // this user does not have password (the line below would hang!)\n  if (!this.passwordHash) return false;\n\n  return bcrypt.compareSync(password, this.passwordHash);\n};\n\nUserSchema.set('toJSON', {\n  transform(doc, { email, name, role, _id }) {\n    return { _id, email, name, role };\n  }\n});\n\nexport default mongoose.model('User', UserSchema);\n"]}