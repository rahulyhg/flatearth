{"version":3,"sources":["../../../../src/modules/auth/controller/login.js"],"names":["t","err","reporter","status","message","join","LoginTypeImpl","$exact","user","string","password","post","ctx","Promise","resolve","setTimeout","validation","validate","request","body","report","includes","map","error","match","name","findOne","Error","update","lastVisited","Date","now","e","log","throw","validPassword","jsonUser","toJSON","api","token","sign","secret","expiresIn","get","find"],"mappings":";;;;;;AAKA;;;;AACA;;;;AACA;;IAAYA,C;;AACZ;;AAEA;;;;;;;;AAEA,MAAMC,MAAMC,aAAa;AACvBC,UAAQ,GADe;AAEvBC,WAAU,iBAAgBF,SAASG,IAAT,CAAc,GAAd,CAAmB;AAFtB,CAAb,CAAZ;;AAKA,MAAMC,gBAAgBN,EAAEO,MAAF,CAAS;AAC7BC,QAAMR,EAAES,MADqB;AAE7BC,YAAUV,EAAES;AAFiB,CAAT,CAAtB;;AAKA;;;;;;;;;kBAWe;AACb,QAAME,IAAN,CAAWC,GAAX,EAAyB;AACvB;AACA,UAAM,IAAIC,OAAJ,CAAYC,WAAW;AAC3BC,iBAAWD,OAAX,EAAoB,GAApB;AACD,KAFK,CAAN;;AAIA,UAAME,aAAahB,EAAEiB,QAAF,CAAWL,IAAIM,OAAJ,CAAYC,IAAvB,EAA6Bb,aAA7B,CAAnB;AACA,QAAIJ,WAAW,sBAAakB,MAAb,CAAoBJ,UAApB,CAAf;;AAEA;AACA,QAAI,CAACd,SAAS,CAAT,EAAYmB,QAAZ,CAAqB,YAArB,CAAL,EAAyC;AACvCnB,iBAAWA,SAASoB,GAAT,CAAaC,SAASA,MAAMC,KAAN,CAAY,mBAAZ,EAAiC,CAAjC,CAAtB,CAAX;AACA,YAAMvB,IAAIC,QAAJ,CAAN;AACD;;AAED,UAAM,EAAEM,MAAMiB,IAAR,EAAcf,QAAd,KAAsCE,IAAIM,OAAJ,CAAYC,IAAxD;AACA,QAAIX,IAAJ;AACA,QAAI;AACFA,aAAO,MAAM,eAAKkB,OAAL,CAAa,EAAED,IAAF,EAAb,CAAb;AACA,UAAI,CAACjB,IAAL,EAAW;AACT,cAAM,IAAImB,KAAJ,EAAN;AACD;AACDnB,WAAKoB,MAAL,CAAY,EAAEC,aAAaC,KAAKC,GAAL,EAAf,EAAZ;AACD,KAND,CAME,OAAOC,CAAP,EAAU;AACVpB,UAAIqB,GAAJ,CAAQV,KAAR,CAAc,EAAEtB,KAAK+B,CAAP,EAAd,EAA0B,sBAA1B;AACApB,UAAIsB,KAAJ,CAAU,GAAV,EAAgB,gBAAeT,IAAK,EAApC;AACD;AACD,QAAI,CAACjB,KAAK2B,aAAL,CAAmBzB,QAAnB,CAAL,EAAmC;AACjCE,UAAIsB,KAAJ,CAAU,GAAV,EAAe,uBAAf;AACD;AACD,UAAME,WAAW5B,KAAK6B,MAAL,EAAjB;AACAzB,QAAI0B,GAAJ,CAAQ,GAAR,EAAa;AACXC,aAAO,uBAAIC,IAAJ,CAASJ,QAAT,EAAmB,iBAAOK,MAA1B,EAAkC,EAAEC,WAAW,IAAb,EAAlC,CADI;AAEXlC,YAAM4B;AAFK,KAAb;AAIA;AACD,GArCY;AAsCb,QAAMO,GAAN,CAAU/B,GAAV,EAAe;AACbA,QAAI0B,GAAJ,CAAQ,GAAR,GAAa,MAAM,eAAKM,IAAL,CAAU,EAAV,CAAnB;AACD;AAxCY,C","file":"login.js","sourcesContent":["// @flow\n\nimport type { Context } from 'koa';\nimport type { TypeOf } from 'flow-io';\n\nimport jwt from 'jsonwebtoken';\nimport config from 'config';\nimport * as t from 'flow-io';\nimport { PathReporter } from 'flow-io/lib/reporters/default';\n\nimport User from '../../../models/User';\n\nconst err = reporter => ({\n  status: 401,\n  message: `check fields: ${reporter.join(' ')}`\n});\n\nconst LoginTypeImpl = t.$exact({\n  user: t.string,\n  password: t.string\n});\n\n/*\nROUTE - /api/v1/auth/login\n  QUERY POST:\n  - { user: string, password: string }\n  ANSWERS:\n   - { status: 'success', token: 'some-token' }\n   - { status: 'error', message: 'some-error' }\n*/\n\ntype LoginType = TypeOf<typeof LoginTypeImpl>;\n\nexport default {\n  async post(ctx: Context) {\n    // anti-bruteforce pause\n    await new Promise(resolve => {\n      setTimeout(resolve, 100);\n    });\n\n    const validation = t.validate(ctx.request.body, LoginTypeImpl);\n    let reporter = PathReporter.report(validation);\n\n    // a bit tricky\n    if (!reporter[0].includes('No errors!')) {\n      reporter = reporter.map(error => error.match(/\\/(.*?): (.*?)?$/g)[0]);\n      throw err(reporter);\n    }\n\n    const { user: name, password }: LoginType = ctx.request.body;\n    let user: ?any;\n    try {\n      user = await User.findOne({ name });\n      if (!user) {\n        throw new Error();\n      }\n      user.update({ lastVisited: Date.now() });\n    } catch (e) {\n      ctx.log.error({ err: e }, 'User not found in DB');\n      ctx.throw(401, `No such User ${name}`);\n    }\n    if (!user.validPassword(password)) {\n      ctx.throw(401, 'password is incorrect');\n    }\n    const jsonUser = user.toJSON();\n    ctx.api(201, {\n      token: jwt.sign(jsonUser, config.secret, { expiresIn: '1d' }),\n      user: jsonUser\n    });\n    // ctx.body = { status: 'success', token: jwt.sign(user, config.secret, { expiresIn: '1d' }) };\n  },\n  async get(ctx) {\n    ctx.api(200, await User.find({}));\n  }\n};\n"]}